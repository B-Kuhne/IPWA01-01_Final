 
 
 
 //JS Befehl damit das Globale Seitenmenü im kollaborierten Zustand aufklappt
 $(document).ready(function(){
    $('.sidenav').sidenav();
  });
//Befehl für das kleine Menüfenster der Befehl klappt den Dropdown-Content aus

$('.dropdown-trigger').dropdown();

 // Überprüfe die Schriftkultur des Benutzers für das Menüfenster
 var userLang = navigator.language || navigator.userLanguage;
 //If Anweisung die Überprüft ob die Schriftkultur Arabisch oder Hebräisch ist
 //Automatische Überprüfung wurde nicht implementiert
  if (userLang.startsWith('ar') || userLang.startsWith('he')) {
    // Wenn die Schriftkultur Arabisch ist, ändere die Richtung des großen Seitenmenüs
    document.getElementById('smallScreenMenu').style.direction = 'rtl';
  }
   




//Funktion in der die Tabelle sortiert wird unabhängig numerisch oder nicht
function sortTable(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById("Datentabelle");
  switching = true;
  // Die Sortierrichtung aufsteigend einstellen:
  dir = "asc";
  /* Erstellen  eine Schleife, die so lange läuft, bis
 kein Wechsel stattgefunden hat: */
  while (switching) {
    // Übergeben das gezeigt wird das nicht getauscht wird:
    switching = false;
    rows = table.rows;
    /* Schleife durch alle Tabellenzeilen (außer der
    erste, die Tabellenüberschriften enthält): */
    for (i = 1; i < (rows.length - 1); i++) {
      // Übergeben das es keinen Wechsel geben soll:
      shouldSwitch = false;
      /* Beide Elemente holen die verglichen werden sollen,
      eines aus der aktuellen Zeile und eines aus der nächsten: */
      x = rows[i].getElementsByTagName("TD")[n];
      y = rows[i + 1].getElementsByTagName("TD")[n];
      /* Prüfen ob die beiden Reihen ihren Platz tauschen sollen,
  basierend auf der Richtung, asc oder desc: */
      if (dir == "asc") {
        if (isNumeric(x.innerHTML) && isNumeric(y.innerHTML)) {
          if (parseFloat(parseNumber(x.innerHTML)) > parseFloat(parseNumber(y.innerHTML))) {
            // Wenn ja dann als Switch markieren Schleife wird hier dann unterbrochen:
            shouldSwitch = true;
            break;
          }
        } else {
          if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
            // Wenn ja dann als Switch markieren Schleife wird hier dann unterbrochen:
            shouldSwitch = true;
            break;
          }
        }
      } else if (dir == "desc") {
        if (isNumeric(x.innerHTML) && isNumeric(y.innerHTML)) {
          if (parseFloat(parseNumber(x.innerHTML)) < parseFloat(parseNumber(y.innerHTML))) {
            // Wenn ja dann als Switch markieren Schleife wird hier dann unterbrochen:
            shouldSwitch = true;
            break;
          }
        } else {
          if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
            // Wenn ja dann als Switch markieren Schleife wird hier dann unterbrochen:
            shouldSwitch = true;
            break;
          }
        }
      }
    }
    if (shouldSwitch) {
      /* Wenn ein Switch markiert wurde, Switch durchführen
      und markieren , dass ein Switch stattgefunden hat: */
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      // Immer wenn ein Switch durchgeführt wird wird der die Anzahl um 1 erhöht:
      switchcount ++;
    } else {
      /* Wenn kein Switch stattgefunden hat UND die Richtung „aufsteigend“ ist,
      setze die Richtung auf „desc“ und führe die while-Schleife erneut aus. */
      if (switchcount == 0 && dir == "asc") {
        dir = "desc";
        switching = true;
      }
    }
  }
}

function isNumeric(str) {
  // Gibt true zurück, wenn die Zeichenkette eine Zahl ist, andernfalls false
  return !isNaN(str) && !isNaN(parseFloat(str));
}

function parseNumber(str) {
  // Parsen der Zahl durch Entfernen nicht-numerischer Zeichen und Umwandlung in eine Gleitkommazahl
  return str.replace(/[^0-9.-]/g, '');
}



//Funktion um die Filterung vorzunehmen 
//Funktion FilterTable mit initialisierung der Variablen
function filterTable() {
  // Variablen initialsieren bzw deklarieren
  var input, filter, table, tr, td, i, txtValue;
  input = document.getElementById("Eingabe");
  filter = input.value.toUpperCase();
  table = document.getElementById("Datentabelle");
  tr = table.getElementsByTagName("tr");

  /// Durchlaufen aller Tabellenzeilen, beginnend ab Index 1, um die Tabellenüberschriften auszuschließen
  for (i = 1; i < tr.length; i++) {
    // Abrufen der Zellen in der aktuellen Zeile
    td = tr[i].getElementsByTagName("td");
    var rowContainsFilter = false;
    // Durchlaufen aller Zellen in der aktuellen Zeile
    for (var j = 0; j < td.length; j++) {
      // Überprüfen, ob der Inhalt der Zelle dem Filterkriterium entspricht

      //inner.Text anstatt inner.html um Code Injektion zu vermeiden
      if (td[j]) {
        txtValue = td[j].textContent || td[j].innerText;
        if (txtValue.toUpperCase().indexOf(filter) > -1) {
          rowContainsFilter = true;
          break;
        }
      }
    }
    // Entscheiden, ob die Zeile angezeigt oder ausgeblendet werden soll, basierend darauf, ob der Filter gefunden wurde
    if (rowContainsFilter) {
      tr[i].style.display = "";
    } else {
      tr[i].style.display = "none";
    }
  }
}



